{"version":3,"sources":["components/pages/DoctorManagement/DoctorUpdate.js"],"names":["DoctorUpdate","_ref","match","_useState","useState","title","firstName","lastName","specialisation","address","street","city","postcode","state","country","location","type","coordinates","language","_useState2","_slicedToArray","doctor","setDoctor","useEffect","axios","get","concat","params","id","then","response","data","catch","error","console","handleChange","e","index","arguments","length","undefined","field","newArray","_toConsumableArray","target","value","_objectSpread","_defineProperty","name","handleAddressChange","_jsxs","onSubmit","preventDefault","put","log","children","_jsx","onChange","placeholder","map","speciality"],"mappings":"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","file":"static/js/30.47fe22a7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DoctorUpdate = ({ match }) => {\r\n    const [doctor, setDoctor] = useState({\r\n        title: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        specialisation: [],\r\n        address: {\r\n            street: '',\r\n            city: '',\r\n            postcode: '',\r\n            state: '',\r\n            country: '',\r\n            location: {\r\n                type: 'Point',\r\n                coordinates: [0, 0],\r\n            },\r\n        },\r\n        language: [],\r\n    });\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://tame-jersey-clam.cyclic.app/api/v1/doctor/${match.params.id}`)\r\n            .then(response => setDoctor(response.data))\r\n            .catch(error => console.error(error));\r\n    }, [match.params.id]);\r\n\r\n    const handleChange = (e, index = null, field = null) => {\r\n        if (index !== null && field !== null) {\r\n            let newArray = [...doctor[field]];\r\n            newArray[index] = e.target.value;\r\n            setDoctor({ ...doctor, [field]: newArray });\r\n        } else {\r\n            setDoctor({ ...doctor, [e.target.name]: e.target.value });\r\n        }\r\n    }\r\n\r\n    const handleAddressChange = (e) => {\r\n        setDoctor({ ...doctor, address: { ...doctor.address, [e.target.name]: e.target.value } });\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        axios.put(`https://tame-jersey-clam.cyclic.app/v1/doctor/${match.params.id}`, doctor).then(response => console.log(response));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label>\r\n                Title:\r\n                <input type=\"text\" name=\"title\" value={doctor.title} onChange={handleChange} />\r\n            </label>\r\n            <label>\r\n                First Name:\r\n                <input type=\"text\" name=\"firstName\" value={doctor.firstName} onChange={handleChange} />\r\n            </label>\r\n            <label>\r\n                Last Name:\r\n                <input type=\"text\" name=\"lastName\" value={doctor.lastName} onChange={handleChange} />\r\n            </label>\r\n            <label>\r\n                Address:\r\n                <input type=\"text\" name=\"street\" value={doctor.address.street} onChange={handleAddressChange} placeholder=\"Street\" />\r\n                <input type=\"text\" name=\"city\" value={doctor.address.city} onChange={handleAddressChange} placeholder=\"City\" />\r\n                <input type=\"number\" name=\"postcode\" value={doctor.address.postcode} onChange={handleAddressChange} placeholder=\"Postcode\" />\r\n                <input type=\"text\" name=\"state\" value={doctor.address.state} onChange={handleAddressChange} placeholder=\"State\" />\r\n                <input type=\"text\" name=\"country\" value={doctor.address.country} onChange={handleAddressChange} placeholder=\"Country\" />\r\n            </label>\r\n            <label>\r\n                Specialisation:\r\n                {doctor.specialisation.map((speciality, index) => (\r\n                    <input key={index} type=\"text\" value={speciality} onChange={(e) => handleChange(e, index, 'specialisation')} />\r\n                ))}\r\n            </label>\r\n            <label>\r\n                Languages:\r\n                {doctor.language.map((language, index) => (\r\n                    <input key={index} type=\"text\" value={language} onChange={(e) => handleChange(e, index, 'language')} />\r\n                ))}\r\n            </label>\r\n            <button type=\"submit\">Update Doctor</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default DoctorUpdate;"],"sourceRoot":""}